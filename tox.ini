[project]
; docker_registry = 172.16.30.170:50000
; icon = {toxinidir}{/}logo.ico
; --------------------------------------------------
[tox]
skipsdist = 1    # does not generate a package, defaults to false
isolated_build = True
envlist =
    format
    coverage
; --------------------------------------------------
[testenv:format]
description = lint and format code with yapf, isort and flake8
skip_install = true
deps =
    toml
    yapf
    isort
    flake8
    Flake8-pyproject

commands =
    yapf {toxinidir}{/}src{/}app -irp
    isort {toxinidir}{/}src{/}app
    flake8 {toxinidir}{/}src{/}app
; --------------------------------------------------
[testenv:coverage]
description = execute unittests and generate coverage report
# changedir = {envtmpdir}
deps =
    -r requirements.txt
    coverage[toml]
    pytest

commands = 
    coverage run --source={toxinidir}{/}src{/}app --branch -m pytest {toxinidir}
    coverage html
; --------------------------------------------------
[testenv:build_consumer_exe]
description = create an .exe from consume.py using pyarmor
deps =
    -r requirements.txt
    pyinstaller-versionfile
    pyinstaller
    pyarmor==7.7.4
    {[testenv:format]deps}
    {[testenv:coverage]deps}

commands = 
    {[testenv:format]commands}
    {[testenv:coverage]commands}

    python "./build_scripts/consumer.py"
; --------------------------------------------------
[testenv:build_producer_exe]
description = create an .exe from main.py using pyarmor
deps =
    -r requirements.txt
    pyinstaller-versionfile
    pyinstaller
    pyarmor==7.7.4
    {[testenv:format]deps}
    {[testenv:coverage]deps}

commands = 
    {[testenv:format]commands}
    {[testenv:coverage]commands}

    python "./build_scripts/producer.py"
; --------------------------------------------------
[testenv:build_consumer_docker]
description = Build docker image, upload to {[project]docker_registry} and remove images from system
allowlist_externals = docker
deps =
    {[testenv:format]deps}
    {[testenv:coverage]deps}

commands = 
    {[testenv:format]commands}
    {[testenv:coverage]commands}
    
    ; build image
    docker build . -t {[project]name}

    ; tag the build with latest and then version from file
    docker image tag {[project]name} {[project]docker_registry}/{[project]name}:latest
    python -c "\
        from src.app.definitions import __version__; \
        from subprocess import Popen, PIPE; \
        import shlex; \
        commands = list(); \ 
        
        commands.append(f'docker tag {[project]name} {[project]docker_registry}/{[project]name}:{__version__}'); \
        [Popen(shlex.split(cmd), shell=True, stdout=PIPE).communicate() for cmd in commands];\
        "
        
    ; push images to registry
    docker image push --all-tags {[project]docker_registry}/{[project]name}
    
    ; delete images
    docker rmi --force {[project]docker_registry}/{[project]name}:latest
    
    python -c "\
        from src.app.definitions import __version__; \
        from subprocess import Popen, PIPE; \
        import shlex; \
        commands = list(); \ 
        
        commands.append(f'docker rmi --force {[project]docker_registry}/{[project]name}:{__version__}'); \
        [Popen(shlex.split(cmd), shell=True, stdout=PIPE).communicate() for cmd in commands];\
        "
    