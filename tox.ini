[project]
name = huey_example

; docker_registry = 172.16.30.170:50000
; icon = {toxinidir}{/}logo.ico

[tox]
skipsdist = 1    # does not generate a package, defaults to false
isolated_build = True
envlist =
    format
    coverage

[testenv:format]
description = lint and format code with yapf, isort and flake8
skip_install = true
deps =
    toml
    yapf
    isort
    flake8
    Flake8-pyproject
commands =
    yapf {toxinidir}{/}src{/}app -irp
    isort {toxinidir}{/}src{/}app
    flake8 {toxinidir}{/}src{/}app
    
    
[testenv:coverage]
description = execute unittests and generate coverage report
deps =
    -r requirements.txt
    coverage[toml]
    pytest
# changedir = {envtmpdir}
commands = 
    coverage run --source={toxinidir}{/}src{/}app --branch -m pytest {toxinidir}
    coverage html


[testenv:build_consumer_exe]
description = create an .exe from consume.py using pyarmor
deps =
    -r requirements.txt
    pyinstaller-versionfile
    pyinstaller
    pyarmor==7.7.4
    {[testenv:format]deps}
    {[testenv:coverage]deps}

commands = 
    {[testenv:format]commands}
    {[testenv:coverage]commands}

    python -c "from src.app.consumer.definitions import __version__; \
               import pyinstaller_versionfile; \
               pyinstaller_versionfile.create_versionfile_from_input_file( \
                   output_file=r'{toxinidir}{/}consumer_versionfile.txt', \
                   input_file=r'{toxinidir}{/}consumer_metadata.yaml', \
                   version=__version__)"

    pyarmor licenses --output ./licenses/ --expired 2030-01-01 default

    pyarmor pack \
        --name consumer_{[project]name}.exe \
        --clean \
        --output "{toxinidir}{/}deployed{/}consumer" \
        --options " \
            --onefile \
            --noupx \
            --version-file '{toxinidir}{/}consumer_versionfile.txt' \
            --paths '{toxinidir}{/}src{/}app' \
            --paths '{toxinidir}{/}src{/}app{/}consumer' \
            --add-data '{toxinidir}{/}src{/}app{/}consumer{/}templates{/}*;templates' \
        " \
        --xoptions " \
            --recursive \
        " \
        --with-license "{toxinidir}{/}licenses{/}default{/}license.lic" \
        "{toxinidir}{/}src{/}app{/}consumer{/}main.py"

    python -c "import os; os.remove(r'{toxinidir}{/}consumer_versionfile.txt')"

[testenv:build_producer_exe]
description = create an .exe from main.py using pyarmor
deps =
    -r requirements.txt
    pyinstaller-versionfile
    pyinstaller
    pyarmor==7.7.4
    {[testenv:format]deps}
    {[testenv:coverage]deps}

commands = 
    {[testenv:format]commands}
    {[testenv:coverage]commands}

    python -c "from src.app.producer.definitions import __version__; \
               import pyinstaller_versionfile; \
               pyinstaller_versionfile.create_versionfile_from_input_file( \
                   output_file=r'{toxinidir}{/}producer_versionfile.txt', \
                   input_file=r'{toxinidir}{/}producer_metadata.yaml', \
                   version=__version__)"

    pyarmor licenses --output ./licenses/ --expired 2030-01-01 default

    pyarmor pack \
        --name producer_{[project]name}.exe \
        --clean \
        --output "{toxinidir}{/}deployed{/}producer" \
        --options " \
            --onefile \
            --noupx \
            --version-file '{toxinidir}{/}producer_versionfile.txt' \
            --paths '{toxinidir}{/}src{/}app' \
            --paths '{toxinidir}{/}src{/}app{/}producer' \
        " \
        --xoptions " \
            --recursive \
        " \
        --with-license "{toxinidir}{/}licenses{/}default{/}license.lic" \
        "{toxinidir}{/}src{/}app{/}producer{/}main.py"

    python -c "import os; os.remove(r'{toxinidir}{/}producer_versionfile.txt')"


[testenv:build_consumer_docker]
description = Build docker image, upload to {[project]docker_registry} and remove images from system
allowlist_externals = docker
deps =
    {[testenv:format]deps}
    {[testenv:coverage]deps}
commands = 
    {[testenv:format]commands}
    {[testenv:coverage]commands}
    
    ; build image
    docker build . -t {[project]name}

    ; tag the build with latest and then version from file
    docker image tag {[project]name} {[project]docker_registry}/{[project]name}:latest
    python -c "\
        from src.app.definitions import __version__; \
        from subprocess import Popen, PIPE; \
        import shlex; \
        commands = list(); \ 
        
        commands.append(f'docker tag {[project]name} {[project]docker_registry}/{[project]name}:{__version__}'); \
        [Popen(shlex.split(cmd), shell=True, stdout=PIPE).communicate() for cmd in commands];\
        "
        
    ; push images to registry
    docker image push --all-tags {[project]docker_registry}/{[project]name}
    
    ; delete images
    docker rmi --force {[project]docker_registry}/{[project]name}:latest
    
    python -c "\
        from src.app.definitions import __version__; \
        from subprocess import Popen, PIPE; \
        import shlex; \
        commands = list(); \ 
        
        commands.append(f'docker rmi --force {[project]docker_registry}/{[project]name}:{__version__}'); \
        [Popen(shlex.split(cmd), shell=True, stdout=PIPE).communicate() for cmd in commands];\
        "
    